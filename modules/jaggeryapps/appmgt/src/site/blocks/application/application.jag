<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include('/jagg/constants.jag');

var action = request.getParameter("action");
var applicationModule = jagg.module("application");
var log = new Log();
(function(){
    if (!jagg.getUser()) {
        print(UNAUTHORIZED_ERROR_RESPONSE);
        return;
    }
    if(action == "uploadExistingArchive"){
        var uploadedArtifact = request.getFile("fileupload");
        var applicationName = request.getParameter("applicationName");
        var appTypeName = request.getParameter("appTypeName");
        var applicationRevision = request.getParameter("applicationRevision");
        applicationModule.uploadExistingArchive(uploadedArtifact, appTypeName, applicationName, applicationRevision);

    }else if(action == "createApplication"){
        var applicationDescription = request.getParameter("applicationDescription");
        var replicas = 1;
        var runtimeId = request.getParameter("runtime");
        var runtimeProperties = parse(request.getParameter("runtimeProperties"));
        var tags = parse(request.getParameter("tags"));
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var appTypeName = request.getParameter("appTypeName");
        var uploadedFileName = request.getParameter("uploadedFileName");
        var appIcon = request.getFile("appIcon");

        applicationModule.addApplication(applicationName, applicationRevision, applicationDescription, replicas,
                runtimeId, appTypeName, runtimeProperties, tags, appIcon, uploadedFileName);
        response.status = 200;
        response.message = "Artifact is successfully uploaded!";

    }else if(action == "stopApplication"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");

        // delete application from kubernetes
        applicationModule.deleteApplicationFromKubernetes(applicationName, applicationRevision);
        // update application status to stopped
        applicationModule.updateApplicationStatus(applicationName, applicationRevision, APPLICATION_STOPPED);

        response.status = 200;
        response.message = "Application is successfully stopped.";

    }else if(action == "startApplication"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");

        // redeploy application from kubernetes
        applicationModule.redeployApplication(applicationName, applicationRevision);

        response.status = 200;
        response.message = "Application starting requested is completed successfully.";

    }else if (action == "getApplicationCreationEvents"){

        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");

        var mod = jagg.module("application");

        var events = mod.getApplicationCreationEvents(applicationName, applicationRevision);
        print(events);

    }else if (action == "getEnvVariablesByNameRevision"){

        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");

        var mod = jagg.module("application");

        var events = mod.getEnvVariablesByNameRevision(applicationName, applicationRevision);
        print(events);

    }else if (action == "updateApplicationRuntimeProperty"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var prevKey = request.getParameter("prevKey");
        var newKey = request.getParameter("newKey");
        var prevValue = request.getParameter("prevValue");
        var newValue = request.getParameter("newValue");

        var mod = jagg.module("application");
        mod.updateApplicationRuntimeProperty(applicationName, applicationRevision,prevKey,newKey,prevValue,newValue);
        response.status = 200;
        response.content = "Runtime property successfully updated.";

    }else if (action == "deleteApplicationRuntimeProperty"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var key = request.getParameter("key");
        var value = request.getParameter("value");

        var mod = jagg.module("application");
        mod.deleteApplicationRuntimeProperty(applicationName, applicationRevision,key,value);
        response.status = 200;
        response.content = "Runtime property successfully deleted.";

    }else if (action == "addApplicationRuntimeProperty"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var key = request.getParameter("key");
        var value = request.getParameter("value");

        var mod = jagg.module("application");
        mod.addApplicationRuntimeProperty(applicationName, applicationRevision,key,value);
        response.status = 200;
        response.content = "Runtime property successfully added.";

    }else if (action == "downloadFromUrl"){
        log.info("blocks downloadFromUrl");
        var artfactUrl = request.getParameter("artfactUrl");
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var appTypeName = request.getParameter("appTypeName");
        var mod = jagg.module("application");
        mod.downloadFromUrl(artfactUrl,applicationName,applicationRevision,appTypeName);
    }else if (action == "addTag"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var key = request.getParameter("key");
        var value = request.getParameter("value");

        var mod = jagg.module("application");
        mod.addTag(applicationName, applicationRevision,key,value);
        response.status = 200;
        response.content = "Tag successfully added.";

    }else if (action == "deleteTag"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var key = request.getParameter("key");
        var value = request.getParameter("value");

        var mod = jagg.module("application");
        mod.deleteTag(applicationName, applicationRevision,key,value);
        response.status = 200;
        response.content = "Tag successfully deleted.";

    }else if (action == "updateTag"){
        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");
        var prevKey = request.getParameter("prevKey");
        var newKey = request.getParameter("newKey");
        var prevValue = request.getParameter("prevValue");
        var newValue = request.getParameter("newValue");

        var mod = jagg.module("application");
        mod.updateTag(applicationName, applicationRevision,prevKey,newKey,prevValue,newValue);
        response.status = 200;
        response.content = "Runtime property successfully updated.";

    }else if (action == "getTags"){

        var applicationName = request.getParameter("applicationName");
        var applicationRevision = request.getParameter("applicationRevision");

        var mod = jagg.module("application");

        var events = mod.getTags(applicationName, applicationRevision);
        print(events);

    } else if (action == "changeAppIcon"){
        var appIcon = request.getFile("changeIcon");
        var applicationName = request.getParameter("applicationName");
        var revision = request.getParameter("selectedRevision");
        var mod = jagg.module("application");
        mod.changeApplicationIcon(applicationName, revision, appIcon);
        print("<html><script>window.location.replace('/appmgt/site/pages/home.jag?applicationName=" + applicationName + "');</script><body></body></html>");
    } else {
        throw new Error("No action specified");
    }
}());

%>
