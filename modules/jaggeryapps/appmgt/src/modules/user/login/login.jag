<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log('modules/user/login/login.jag');

var modManager = jagg.module("manager");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;

function login(userName, password, requestURL) {
    log.debug("Initializing login module");
    var startTime_module = new Date().getTime();
    var tenantDomain = SUPER_TENANT_DOMAIN_NAME;
    if (userName.indexOf("@") != -1) {
        tenantDomain = userName.substring(userName.lastIndexOf('@') + 1);
    } else {	// else assume super tenant
        tenantDomain = SUPER_TENANT_DOMAIN_NAME;
    }
    var ws = require('ws');
    var context=multitenancy.getPrivilegedCarbonContext();
    var tenantManager= multitenancy.getTenantManager();
    var finalResult={};

    // check whether given tenant domain is valid
    try {
       log.debug("Checking whether given tenant:" + tenantDomain + " is valid");
       if (tenantManager.getTenantId(tenantDomain) == -1) {
           finalResult.error = "true";
           finalResult.message = "Authorization Failed.";
           finalResult.username = userName;
           log.debug("Failing authorization since given tenant:" + tenantDomain + " is not valid");
        return stringify(finalResult);
       }
    } catch (e) {
        log.error("Error while get tenant Id user : " + userName);
        log.error(e);
        throw e;
    }

    try{
        log.debug("Starting tenant flow for tenant:" + tenantDomain);
        var startTime_tenantFlow = new Date().getTime();
        context.startTenantFlow();
        context.getThreadLocalCarbonContext().setTenantId(tenantManager.getTenantId(tenantDomain));
        context.getThreadLocalCarbonContext().setTenantDomain(tenantDomain);
        context.getThreadLocalCarbonContext().setUsername(userName);
        var endTime_tenantFlow = new Date().getTime();
        log.debug("Tenant flow started in :" + (endTime_tenantFlow-startTime_tenantFlow) + " milliseconds");
        log. debug("Start authenticating user:" + userName + " in tenant:" + tenantDomain);
        var startTime_authenticate = new Date().getTime();
        var result = server.Server.prototype.authenticate(userName,password);
        if(result === true){
            var endTime_authenticate = new Date().getTime();
            log.debug("Successfully authenticated user:" + userName + " in tenant:" + tenantDomain + " in:" +
                                                    (endTime_authenticate - startTime_authenticate) + " milliseconds");
            var startTime_authorize = new Date().getTime();
            jagg.setSelectedCloud(request.getRequestURL());
            var permission = modManager.getPropertyValue(jagg.getSelectedCloud() + LOGIN_PERMISSION);
            var isUserAuthorized = modManager.checkAuthorizationForUser(userName, permission);
            if (isUserAuthorized){
                jagg.setUser(userName);
                finalResult.error="false";
                finalResult.message="User successfully logged in";
                finalResult.username=userName;
                var endTime_authorize = new Date().getTime();
                log.debug("Successfully authorized user:" + userName + " in tenant:" + tenantDomain + " in:" +
                                                           (endTime_authorize - startTime_authorize) + " milliseconds");
            } else {
                finalResult.error="true";
                finalResult.message="Authorization Failed.";
                finalResult.username=userName;
                log.debug("Authorization failed for user:" + userName + " in tenant:" + tenantDomain);
                session.invalidate();
            }
        }else{
            finalResult.error="true";
            finalResult.message="Authentication Failed.";
            finalResult.username=userName;
            log.debug("Authentication failed for user:" + userName + " in tenant:" + tenantDomain);
        }
        var endTime_module = new Date().getTime();
        log.debug("Finishing login module in:" + (endTime_module - startTime_module) + " milliseconds");
        return stringify(finalResult);
    } catch(e){
        log.error("Error while authenticating user : " + userName);
        log.error(e);
        throw e;
    } finally {
        context.endTenantFlow();
    }
}

function logout(){
    var log = new Log();
    var username = jagg.getUser();
    var finalResult={};

    if(username!=null){
        jagg.setUser(null)
         print(" error:false message:'User successfully logged out username:"+username);
	finalResult.error="false";
	finalResult.message="User successfully logged out";
       // print('error:false message:User successfully logged out');
	 return stringify(finalResult);
    }
	finalResult.error="true";
	finalResult.message="User already logged out";
        print('error:true message:already logged out');
	 return stringify(finalResult);

}

/**
 * Method to allow user to log in by providing a JSON web token.
 *
 * returns {}
 */
function jwtIsUserAuthenticated(authorizationHeader) {
    var context = multitenancy.getPrivilegedCarbonContext();
    var finalResult = {
        error: "true",
        message: "",
        username: null
    };
    var msg = null;
    try {
        context.startTenantFlow();
        //Get authorization header and check if authtorization type is equal to "Bearer"
        var authType = getAuthType(authorizationHeader);
        if (authType != null && (authType.toUpperCase() == AUTHORIZATION_HEADER_TYPE.toUpperCase())) {
            var claimResponse = getJWTClaim(authorizationHeader, SIGNED_JWT_AUTH_USERNAME);
            var usernameWithTenantDomain = claimResponse.usernameWithTenantDomain;
            if (usernameWithTenantDomain) {
                var tenantIdResponse = getTenantIdFromUsernameWithTenantDomain(context, usernameWithTenantDomain);
                var tenantId = tenantIdResponse.tenantId;
                var username = tenantIdResponse.username;
                if (tenantId == -1) {
                    msg = tenantIdResponse.message;
                    finalResult.username = username;
                } else {
                    var tenantDomain = tenantIdResponse.tenantDomain;
                    var authorizationResponse =
                            checkAuthorizationOfUser(tenantId, tenantDomain, username, usernameWithTenantDomain);
                    msg = authorizationResponse.message;
                    finalResult.username = authorizationResponse.username;
                    finalResult.error = authorizationResponse.error;
                }
            } else {
                msg = claimResponse.message;
            }
        } else {
            msg = "Failing authorization since Authorization header with authentication type Bearer is not present.";
        }
        finalResult.message = msg;
        if (log.isDebugEnabled()) {
            log.debug(msg);
        }
        return stringify(finalResult);
    } catch (e) {
        msg = "Error authenticating the user for authorization header: " + authorizationHeader;
        log.error(msg);
        log.error(e);
    } finally {
        context.endTenantFlow();
    }
}

/**
 * Method to check authorization of user.
 *
 * returns {indicate if authorization is successful or not}
 */
function checkAuthorizationOfUser(tenantId, tenantDomain, username, usernameWithTenantDomain) {
    var result = {
      username : username,
      message : "",
      error: "true"
    };
    var realmService = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService');
    //Proceed if the extracted tenant domain is valid
    var realm = realmService.getTenantUserRealm(tenantId);
    var userStoreManager = realm.getUserStoreManager();
    //Proceed if the user is a valid user within the tenant domain
    //Ex:- Suppose the username claim in the set of claims in the JWT token is foo@foodomain
    //then foo is the username and foodomain is the tenant domain.
    //If foo exists in foodomain the user will authenticated and if foo doesn't exist in
    //foodomain the user will not be authenticated
    if (userStoreManager != null && userStoreManager.isExistingUser(username)) {
        var permission = modManager.getPropertyValue(DEFAULT_LOGIN_PERMISSION);
        var isUserAuthorized =
                modManager.checkAuthorizationForUser(usernameWithTenantDomain, permission);
        if (isUserAuthorized) {
            jagg.setUser(usernameWithTenantDomain);
            result.message = "User successfully logged in";
            result.error = "false";
        } else {
            result.message = "Authorization failed for user:" + username + " in tenant:" + tenantDomain;
            session.invalidate();
        }
    } else {
        result.message = "Invalid user: " + username + " in tenant domain:" + tenantDomain;
    }
    return result;
}

/**
 * Method to get tenant Id given the username with tenant domain.
 *
 * returns {tenant Id}
 */
function getTenantIdFromUsernameWithTenantDomain(context, usernameWithTenantDomain) {
    var MultitenantUtils = Packages.org.wso2.carbon.utils.multitenancy.MultitenantUtils;
    var result = {
        tenantId: -1,
        username: null,
        tenantDomain: null,
        message: ""
    };
    if (usernameWithTenantDomain.indexOf("@") != -1) {
        //Extract username and tenant domain from the full user name
        result.tenantDomain = MultitenantUtils.getTenantDomain(usernameWithTenantDomain);
        result.username = MultitenantUtils.getTenantAwareUsername(usernameWithTenantDomain);
        //To get the tenant user realm set the carbon context details
        var multiTenancyTenantManager = multitenancy.getTenantManager();
        context.getThreadLocalCarbonContext().setTenantId(multiTenancyTenantManager.getTenantId(result.tenantDomain));
        context.getThreadLocalCarbonContext().setUsername(usernameWithTenantDomain);
        context.getThreadLocalCarbonContext().setTenantDomain(result.tenantDomain, true);
        var realmService = carbon.server.osgiService('org.wso2.carbon.user.core.service.RealmService');
        var realmServiceTenantManager = realmService.getTenantManager();
        //Get tenant id from the extracted tenant domain
        var tenantId = realmServiceTenantManager.getTenantId(result.tenantDomain);
        if (tenantId == -1) {
            result.message = "tenantDomain is not valid. username: " + result.username + ", tenantDomain: "
                    + result.tenantDomain;
        } else {
            result.tenantId = tenantId;
        }
    } else {
        result.message = "Failing authorization since tenant domain is not present in claim "
                + SIGNED_JWT_AUTH_USERNAME;
        result.username = usernameWithTenantDomain;
    }
    return result;
}

/**
 * Method to get claim from JWT.
 *
 * returns {username claim}
 */
function getJWTClaim(authorizationHeader, claimType) {
    var KeyStoreManager = Packages.org.wso2.carbon.core.util.KeyStoreManager;
    var RSAPublicKey = Packages.java.security.interfaces.RSAPublicKey;
    var RSASSAVerifier = Packages.com.nimbusds.jose.crypto.RSASSAVerifier;
    var SignedJWT = Packages.com.nimbusds.jwt.SignedJWT;
    //Get the filesystem keystore default primary certificate
    var keyStoreManager = KeyStoreManager.getInstance(SUPER_TENANT_ID);
    //Decode authorization header
    var headerData = decodeAuthorizationHeader(authorizationHeader);
    var rsaPublicKey = new RSAPublicKey(keyStoreManager.getDefaultPublicKey());
    var verifier = new RSASSAVerifier(rsaPublicKey);
    var jwsObject = SignedJWT.parse(headerData);
    var result = {
      usernameWithTenantDomain : null,
      message : ""
    };
    //Proceed if the server from which the login request originated can be trusted and if a valid JWT token is
    //provided in the set of claims in the authorization header
    if (jwsObject.verify(verifier)) {
        //Get the full username from the set of claims in the JWT token
        var username = jwsObject.getJWTClaimsSet().getStringClaim(claimType);
        if (username) {
            result.usernameWithTenantDomain = username;
        } else {
            result.message = "Failing authorization since claim " + SIGNED_JWT_AUTH_USERNAME + " is not present";
        }
    } else {
        result.message = "Invalid JWT token. Please provide valid token in authorization header.";
    }
    return result;
}

/**
 * Method to get authorization header type.
 *
 * returns {authorization header type}
 */
function getAuthType(authorizationHeader) {
    if (authorizationHeader != null) {
        var splitValues = authorizationHeader.trim().split(" ");
        if (splitValues.length == 0) {
            return null;
        } else {
            return splitValues[0].trim();
        }
    } else {
        return null;
    }
}

/**
 * Method to decode authorization header.
 *
 * returns {decoded authorization header value}
 */
function decodeAuthorizationHeader(authorizationHeader) {
    var splitValues = authorizationHeader.trim().split(" ");
    var Base64Utils = Packages.org.apache.axiom.util.base64.Base64Utils;

    var decodedBytes = Base64Utils.decode(splitValues[1].trim());
    if (decodedBytes != null) {
        return new java.lang.String(decodedBytes);
    } else {
        if (log.isDebugEnabled()) {
            log.debug("Error decoding authorization header: " + authorizationHeader);
        }
        return null;
    }
}
%>
