<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

jagg.module("application", {
    addApplication:function () {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").addApplication.apply(this, arguments);
    },
    addApplicationViaGitHub:function () {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").addApplicationViaGitHub.apply(this, arguments);
    },
    deleteApplicationFromKubernetes:function () {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").deleteApplicationFromKubernetes.apply(this, arguments);
    },
    deleteApplicationUploadedPath:function () {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").deleteApplicationUploadedPath.apply(this, arguments);
    },
    deleteApplicationFromDatabase:function () {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").deleteApplicationFromDatabase.apply(this, arguments);
    },
    deleteApplication:function () {
            return jagg.require(jagg.getModulesDir() + "application/application.jag").deleteApplication.apply(this, arguments);
    },
    redeployApplication:function () {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").redeployApplication.apply(this, arguments);
    },
    updateApplicationStatus:function () {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").updateApplicationStatus.apply(this, arguments);
    },

    getAllAppTypes:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getAllAppTypes.apply(this, arguments);
    },

    getAllRuntimes:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getAllRuntimes.apply(this, arguments);
    },

    getAllApplications:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getAllApplications.apply(this, arguments);
    },

    getApplication:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getApplication.apply(this, arguments);
    },
    getEnvVariablesOfVersion:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getEnvVariablesOfVersion.apply(this, arguments);
    },
    updateRuntimeProperty:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").updateRuntimeProperty.apply(this, arguments);
    },
    deleteRuntimeProperty:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").deleteRuntimeProperty.apply(this, arguments);
    },
    addRuntimeProperty:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").addRuntimeProperty.apply(this, arguments);
    },
    getTags:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getTags.apply(this, arguments);
    },
    updateTag:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").updateTag.apply(this, arguments);
    },
    deleteTag:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").deleteTag.apply(this, arguments);
    },
    addTag:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").addTag.apply(this, arguments);
    },
    getVersionListOfApplication:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getVersionListOfApplication.apply(this, arguments);
    },
    getDeploymentURL:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getDeploymentURL.apply(this, arguments);
    },
    getSelectedRevisionFromSession:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getSelectedRevisionFromSession.apply(this, arguments);
    },
    putSelectedRevisionToSession:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").putSelectedRevisionToSession.apply(this, arguments);
    },
    getApplicationCreationEvents:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getApplicationCreationEvents.apply(this, arguments);
    },
    changeApplicationIcon:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").changeApplicationIcon.apply(this, arguments);
    },
    uploadExistingArchive:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").uploadExistingArchive.apply(this, arguments);
    },
    downloadFromUrl:function() {
            return jagg.require(jagg.getModulesDir() + "application/application.jag").downloadFromUrl.apply(this, arguments);
    },
    getApplicationHashId:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getApplicationHashId.apply(this, arguments);
    },
    getApplicationHashIdByName:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getApplicationHashIdByName.apply(this, arguments);
    },
    getVersionHashId:function() {
        return jagg.require(jagg.getModulesDir() + "application/application.jag").getVersionHashId.apply(this, arguments);
    }
});
%>
