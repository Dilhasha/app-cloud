<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log("module/application/application.jag");
var modManager = jagg.module("manager");
var ApplicationManager = Packages.org.wso2.appcloud.core.ApplicationManager;
var Application = Packages.org.wso2.appcloud.core.dto.Application;
var KubernetesProvisioningUtils =  Packages.org.wso2.appcloud.provisioning.runtime.Utils.KubernetesProvisioningUtils;
var EventsManager = Packages.org.wso2.appcloud.core.EventsManager;
var Event = Packages.org.wso2.appcloud.core.dto.Event;
var Deployment = Packages.org.wso2.appcloud.core.dto.Deployment;
var Container = Packages.org.wso2.appcloud.core.dto.Container;
var ServiceProxy = Packages.org.wso2.appcloud.core.dto.ServiceProxy;
var CloudUtil = Packages.org.wso2.appcloud.common.util.AppCloudUtil;
var RuntimeProperty = Packages.org.wso2.appcloud.core.dto.RuntimeProperty;
var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
/**
 * Add a application object
 *
 * @param applicationName name of the application
 * @param applicationRevision revision number of the application
 * @param applicationDescription description of the application
 * @param replicas no of replicas
 * @param uploadedArtifact the uploaded artifact file
 * @param runtimeId runtime id of the application
 */
var addApplication = function (applicationName, applicationRevision, applicationDescription, replicas,
                               runtimeId, appTypeName, runtimePropertiesArray, tagArray, appIcon, uploadedFileName) {
    log.info("Started creating App => name: " + applicationName + " " +
            "Revision: " + applicationRevision + " " + "Description: " + applicationDescription + " " +
            "Replicas: " + replicas + " runtimeId: " + runtimeId + " apptype: " + appTypeName + " "
    );

    //================================= Adding application to Database =========================================
    var application = new Application();
    try {
        application.setApplicationName(applicationName);
        application.setRevision(applicationRevision);
        application.setDescription(applicationDescription);
        application.setNumberOfReplicas(replicas);
        application.setRuntimeId(runtimeId);
        application.setApplicationType(appTypeName);
        application.setStatus(APPLICATION_CREATED);

        if(runtimePropertiesArray.length > 0) {
            var runtimePropertyList = generateRuntimePropsList(runtimePropertiesArray);
            application.setRuntimeProperties(runtimePropertyList);
        }

        if(tagArray.length > 0){
            var tagList = generateTagsList(tagArray);
            application.setLabels(tagList);
        }

        ApplicationManager.addApplication(application);

        if(appIcon){
            changeApplicationIcon(applicationName, applicationRevision, appIcon);
        }
    } catch (e){
        var msg = "Error while adding application to database";
        addEvent(DATABASE_ADD, EVENT_FAILED, msg, applicationName, applicationRevision);
        ApplicationManager.updateApplicationStatus(APPLICATION_ERROR, applicationName, applicationRevision);
        log.error(msg);
        log.error(e);
        log.info("Application creation failed because initial application metadata persistence failed and roll back process" +
                " is started for application:"+applicationName+" with revision:"+applicationRevision);
        deleteApplicationUploadedPath(applicationName, applicationRevision);
        throw e;
    }
    //============================================================================================================

    //==================================== Create docker file block ==============================================
    //Adding docker file create pending event
    var msg = "Docker file create successfully triggered in appcloud";
    addEvent(DOCKER_FILE_CREATE, EVENT_PENDING, msg, applicationName, applicationRevision);

    try {
        var DockerOpClient = Packages.org.wso2.appcloud.core.docker.DockerOpClient;
        var dockerOpClient = new DockerOpClient(modManager.getPropertyValue("DockerClientURL"));
        var fileUploadPath = "/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
                + modManager.getTenantDomain() + "/" + applicationName + "/" + applicationRevision + "/";
        var absFileUploadedPath = modManager.getPropertyValue(PROPERTY_APPMGT_DEPLOYMENT_DIR_PATH) + fileUploadPath;
        var dockerFilePath = absFileUploadedPath + DOCKER_FILE_NAME;

         var dockerTemplateFilePath = modManager.getPropertyValue(PROPERTY_APPMGT_DEPLOYMENT_DIR_PATH) + "/" + "DockerFiles";

        var uploadArtifactTmpName;
        var checkFileExtZIP = isFileExtZIP(uploadedFileName);
        if (checkFileExtZIP) {
            var fileName = uploadedFileName.substring(0, uploadedFileName.lastIndexOf("."));
            uploadArtifactTmpName = fileName + ".upload";
        } else {
            uploadArtifactTmpName = uploadedFileName;
        }
        dockerOpClient.createDockerFile(runtimeId, appTypeName, uploadArtifactTmpName, dockerFilePath,dockerTemplateFilePath);

    } catch(e){
        var msg = "Error while creating docker file";
        addEvent(DOCKER_FILE_CREATE, EVENT_FAILED, msg, applicationName, applicationRevision);
        ApplicationManager.updateApplicationStatus(APPLICATION_ERROR, applicationName, applicationRevision);
        log.error(msg);
        log.error(e);
        log.info("Application creation failed because docker file creation failed and roll back process" +
                " is started for application:"+applicationName+" with revision:"+applicationRevision);
        deleteApplicationUploadedPath(applicationName, applicationRevision);
        deleteApplicationFromDatabase(applicationName, applicationRevision);
        throw e;
    }

    //Adding docker file create success event
    var msg = "Docker file successfully created for application";
    addEvent(DOCKER_FILE_CREATE, EVENT_SUCCEEDED, msg, applicationName, applicationRevision);
    //============================================================================================================

    //==================================== Build docker image block ==============================================
    //Adding docker build pending event
    var msg = "Docker image build successfully triggered in appcloud";
    addEvent(DOCKER_IMAGE_BUILD, EVENT_PENDING, msg, applicationName, applicationRevision);

    var applicationRuntime = ApplicationManager.getApplicationRuntime(runtimeId);
    var tenantDockerRegistryUrl = modManager.getPropertyValue(PROPERTY_DOCKER_REGISTRY_URL) + "/" + dockerRegTenantSpace;
    var tagName = applicationRuntime.getTag() +"-"+ modManager.getTenantDomain() +"-"+applicationName+"-"+applicationRevision;
    

    try {
        var dockerRegTenantSpace = modManager.getTenantDomain().replace(".","-");
        dockerOpClient.buildDockerImage(applicationRuntime.getRepoURL() ,applicationRuntime.getImageName(), tagName, absFileUploadedPath);
    } catch (e){
        var msg = "Error while building docker file";
        addEvent(DOCKER_IMAGE_BUILD, EVENT_FAILED, msg, applicationName, applicationRevision);
        ApplicationManager.updateApplicationStatus(APPLICATION_ERROR, applicationName, applicationRevision);
        log.error(msg);
        log.error(e);
        log.info("Application creation failed because dokcer image build failed and roll back process" +
                " is started for application:"+applicationName+" with revision:"+applicationRevision);
        deleteApplicationUploadedPath(applicationName, applicationRevision);
        deleteApplicationFromDatabase(applicationName, applicationRevision);
        throw e;
    }
    //Adding docker build success event
    var msg = "Docker image build successfully built";
    addEvent(DOCKER_IMAGE_BUILD, EVENT_SUCCEEDED, msg, applicationName, applicationRevision);
    //============================================================================================================

    //==================================== Push docker image block ===============================================
    //Adding docker image push pending event
    var msg = "Docker image push successfully triggered in triggered";
    addEvent(DOCKER_REGISTRY_PUSH, EVENT_PENDING, msg, applicationName, applicationRevision);
    try {
        dockerOpClient.pushDockerImage(applicationRuntime.getRepoURL(),applicationRuntime.getImageName(), tagName);
    } catch (e) {
        var msg = "Error uploading docker image to remote registry";
        addEvent(DOCKER_REGISTRY_PUSH, EVENT_FAILED, msg, applicationName, applicationRevision);
        ApplicationManager.updateApplicationStatus(APPLICATION_ERROR, applicationName, applicationRevision);
        log.error(msg);
        log.error(e);
        log.info("Application creation failed because docker image push failed and roll back process" +
                " is started for application:"+applicationName+" with revision:"+applicationRevision);
        deleteApplicationUploadedPath(applicationName, applicationRevision);
        deleteApplicationFromDatabase(applicationName, applicationRevision);
        throw e;
    }
    //Adding docker push success event
    var msg = "Docker image push successfully completed";
    addEvent(DOCKER_REGISTRY_PUSH, EVENT_SUCCEEDED, msg, applicationName, applicationRevision);
    //============================================================================================================

    //==================================== Kubernetes deploy block ===============================================
    var runtimeProperties = application.getRuntimeProperties();
    var containers = getContainers(applicationRuntime.getRepoURL(), applicationRuntime.getImageName(), tagName, applicationName ,applicationName, applicationRevision, runtimeProperties, runtimeId);
    var deploymentConfig = getDeploymentConfig(containers, applicationName, applicationRevision, replicas);
    deployApplication(applicationName, applicationRevision, deploymentConfig, false);

    //=============================================================================================================

};

var deployApplication = function(applicationName, applicationRevision, deploymentConfig, isRedeploy){
  
    //Adding deployment pending event
    var msg = "Application deployment successfully triggered in Kubernetes";
    addEvent(KUBE_DEPLOY, EVENT_PENDING, msg, applicationName, applicationRevision);

    //Creating basic deployment
    var KubernetesRuntime = Packages.org.wso2.appcloud.provisioning.runtime.KubernetesRuntimeProvisioningService;
    var applicationCtx = KubernetesProvisioningUtils.getApplicationContext(
             applicationName, applicationRevision, null , modManager.getTenantId(), modManager.getTenantDomain());
    var kubService = new KubernetesRuntime(applicationCtx);

    log.info("Deploying application: " + applicationName);
    try{
        kubService.deployApplication(deploymentConfig);
        if(!isRedeploy) {          
            persistDeploymentConfig(deploymentConfig, applicationName, applicationRevision);
        }

    } catch(e){
        var msg = "Error while submitting application deployment to Kubernetes";
        addEvent(KUBE_DEPLOY, EVENT_FAILED, msg, applicationName, applicationRevision);
        ApplicationManager.updateApplicationStatus(APPLICATION_ERROR, applicationName, applicationRevision);
        log.error(msg);
        log.error(e);
        log.info("Application deployment failed because kubernetes deployment was failed and roll back process" +
                " is started for application:"+applicationName+" with revision:"+applicationRevision);
        deleteApplicationUploadedPath(applicationName, applicationRevision);
        deleteApplicationFromDatabase(applicationName, applicationRevision);
        throw e;
    }
    //Adding deployment success event
    var msg = "Application deployment successfull";
    addEvent(KUBE_DEPLOY, EVENT_SUCCEEDED, msg, applicationName, applicationRevision);
    //============================================================================================================

    //======================================= Creating Ingress ===================================================
    //Adding deployment pending event
    var msg = "Application ingress creation successfully triggered in Kubernetes";
    addEvent(INGRESS, EVENT_PENDING, msg, applicationName, applicationRevision);
    try{
        var appLaunchURL = constructAppLaunchURL(applicationName, applicationRevision);

        var ingressCreated = kubService.createDeploymentUrl(appLaunchURL);
        log.info("Deployment URL status: " + ingressCreated);
        var msg = "Application ingress creation successful";
        addEvent(INGRESS, EVENT_SUCCEEDED, msg, applicationName, applicationRevision);
    } catch(e){
        var msg = "Application ingress creation failed in Kubernetes";
        addEvent(INGRESS, EVENT_FAILED, msg, applicationName, applicationRevision);
        ApplicationManager.updateApplicationStatus(APPLICATION_ERROR, applicationName, applicationRevision);
        log.info("Application deployment failed because ingress is not created successfully and roll back process" +
                " is started for application:"+applicationName+" with revision:"+applicationRevision);
        deleteApplicationUploadedPath(applicationName, applicationRevision);
        deleteApplicationFromDatabase(applicationName, applicationRevision);
        deleteApplicationFromKubernetes(applicationName, applicationRevision);
        log.error(msg);
        log.error(e);
        throw e;
    }
    //======================================= checking pod status =================================================
    //Adding pod status pending event
    var msg = "Application pods Scheduled";
    var podStatus = KubernetesProvisioningUtils.getPodStatus(applicationCtx);
    var prevPodStatus = "";
    addEvent(POD_STATUS, EVENT_PENDING, podStatus, applicationName, applicationRevision);

    var counter = 0;
    while(counter < 180){ // Waiting 3 minutes to gets pods up and running
        java.lang.Thread.sleep(1000);
        var podStatus = KubernetesProvisioningUtils.getPodStatus(applicationCtx);
        counter = counter + 1;
        if (podStatus == "Running") {
            //Adding pod status pending event
            var msg = "Application started successfully";
            addEvent(POD_STATUS, EVENT_SUCCEEDED, podStatus, applicationName, applicationRevision);
            ApplicationManager.updateApplicationStatus(APPLICATION_RUNNING, applicationName, applicationRevision);
            break;
        }else if(counter == 180){ // if pods doesn't starts withing 3 minutes user redirected to user home
            //Adding pod status error event
            var msg = "Application starting failed";
            var podStatus = KubernetesProvisioningUtils.getPodStatus(applicationCtx);
            addEvent(POD_STATUS, EVENT_FAILED, podStatus, applicationName, applicationRevision);
            ApplicationManager.updateApplicationStatus(APPLICATION_ERROR, applicationName, applicationRevision);
            log.info("Application rollback started for application:"+applicationName + " with revision:"+
                    applicationRevision +" because pods are not running even after 3 minutes.");
            deleteApplicationUploadedPath(applicationName, applicationRevision);
            deleteDeployment(applicationName, applicationRevision);
            deleteApplicationFromDatabase(applicationName, applicationRevision);
            deleteApplicationFromKubernetes(applicationName, applicationRevision);
        } else {
            var podStatus = KubernetesProvisioningUtils.getPodStatus(applicationCtx);
            if (podStatus !== prevPodStatus) {
                addEvent(POD_STATUS, EVENT_PENDING, podStatus, applicationName, applicationRevision);
                prevPodStatus = podStatus;
            }
        }
    }
};

var constructAppLaunchURL = function(applicationName, applicationRevision){
    var urlPrefix = modManager.getTenantDomain()
            + "-" + applicationName + "-" + applicationRevision;
    var appLaunchURL = urlPrefix.replace(/\./g, '-')
            +  "." + modManager.getPropertyValue("ApplicationLaunchBaseURL");

    log.info("Application Launch URL: " + appLaunchURL);

    return appLaunchURL;
};

var deleteDeployment = function(applicationName, applicationRevision){
    ApplicationManager.deleteDeployment(applicationName, applicationRevision);
};

var updateApplicationStatus = function(applicationName, applicationRevision, status){
    log.info(applicationName +' '+applicationRevision+' '+status);
    ApplicationManager.updateApplicationStatus(status, applicationName, applicationRevision);
};

var redeployApplication = function(applicationName, applicationRevision){
    var deploymentConfig = buildDeploymentConfigFromDB(applicationName, applicationRevision);
    deployApplication(applicationName, applicationRevision, deploymentConfig, true);
};
var persistDeploymentConfig = function(deploymentConfig, applicationName, applicationRevision){

    var containerList = deploymentConfig.getContainers();
    var ctr = containerList.get(0);
    var serviceProxies = ctr.getServiceProxies();
    var svc = serviceProxies.get(0);

    var deployment = new Deployment();
    deployment.setDeploymentName(deploymentConfig.getDeploymentName());
    log.info("Deployment name:" + deploymentConfig.getDeploymentName());
    deployment.setReplicas(parseInt(deploymentConfig.getReplicas()));
    log.info("Replicas:" + deploymentConfig.getReplicas());

    var serviceProxy = new ServiceProxy();
    serviceProxy.setServiceName(svc.getServiceName());
    log.info("Service name:" + svc.getServiceName());
    serviceProxy.setServiceProtocol(svc.getServiceProtocol());
    log.info("Service protocol:" + svc.getServiceProtocol());
    serviceProxy.setServicePort(svc.getServicePort());
    log.info("Service port:" + svc.getServicePort());
    serviceProxy.setServiceBackendPort(svc.getServiceBackendPort());
    log.info("Service Backend Port:" + svc.getServiceBackendPort());

    var container = new Container();
    container.setImageName(ctr.getBaseImageName());
    log.info("Image name:" + ctr.getBaseImageName());
    container.setImageVersion(ctr.getBaseImageVersion());
    log.info("Image version:" + ctr.getBaseImageVersion());

    var proxies = new java.util.HashSet();
    proxies.add(serviceProxy);
    container.setServiceProxies(proxies);

    var containerSet = new java.util.HashSet();
    containerSet.add(container);
    deployment.setContainers(containerSet);
    ApplicationManager.addDeployment(applicationName,applicationRevision, deployment );
};

var buildDeploymentConfigFromDB = function(applicationName, applicationRevision){
    var deployment = ApplicationManager.getDeployment(applicationName,applicationRevision);

    var deploymentConfig = new Packages.org.wso2.appcloud.provisioning.runtime.beans.DeploymentConfig();
    deploymentConfig.setDeploymentName(deployment.getDeploymentName());
    deploymentConfig.setReplicas(parseInt(deployment.getReplicas()));

    var deploymentContainers = deployment.getContainers();
    var provisioningContainerList = new java.util.ArrayList();
    var containerIterator = deploymentContainers.iterator();
    while(containerIterator.hasNext()){
        var deploymentContainer = containerIterator.next();
        var provisioningContainer = new Packages.org.wso2.appcloud.provisioning.runtime.beans.Container();
        provisioningContainer.setContainerName(applicationName);
        provisioningContainer.setBaseImageName(deploymentContainer.getImageName());
        provisioningContainer.setBaseImageVersion(deploymentContainer.getImageVersion());

        //Adding runtime properties to k8 container
        var runtimeProperties = deploymentContainer.getRuntimeProperties();
        var envs = getRuntimeProperties(runtimeProperties);
        provisioningContainer.setEnvVariables(envs);

        var deploymentProxies = deploymentContainer.getServiceProxies();
        var provisioningProxyList = new java.util.ArrayList();
        var proxyIterator = deploymentProxies.iterator();
        while(proxyIterator.hasNext()){
            var deploymentProxy = proxyIterator.next();
            var provisioningProxy = new Packages.org.wso2.appcloud.provisioning.runtime.beans.ServiceProxy();
            provisioningProxy.setServiceName(deploymentProxy.getServiceName());
            provisioningProxy.setServiceProtocol(deploymentProxy.getServiceProtocol());
            provisioningProxy.setServicePort(deploymentProxy.getServicePort());
            provisioningProxy.setServiceBackendPort(parseInt(deploymentProxy.getServiceBackendPort()));
            provisioningProxyList.add(provisioningProxy);
        }
        provisioningContainer.setServiceProxies(provisioningProxyList);
        provisioningContainerList.add(provisioningContainer);
    }
    deploymentConfig.setContainers(provisioningContainerList);

    return deploymentConfig;

};

/**
 * Method for getting all the available application types. e.g : war, mss, car
 */
function getContainers(tenantDockerRegistryUrl, baseImageName, tag, applicationName, appServiceName, applicationRevision, runtimeProperties, runtimeId){
    var containerList = new java.util.ArrayList();
    var container = new Packages.org.wso2.appcloud.provisioning.runtime.beans.Container();
    var appBaseImageName = tenantDockerRegistryUrl + "/" + baseImageName;
    container.setContainerName(applicationName);
    container.setBaseImageName(appBaseImageName);
    container.setBaseImageVersion(tag);
    var envs = getRuntimeProperties(runtimeProperties);
    container.setEnvVariables(envs);
    var serviceProxyList = new java.util.ArrayList();
    var services = ApplicationManager.getServices(runtimeId);

    for(var i = 0; i < services.length; i++){
        var serviceProxy = new Packages.org.wso2.appcloud.provisioning.runtime.beans.ServiceProxy();
        var service = services[i];
        serviceProxy.setServiceName(appServiceName + "-" + applicationRevision.replace(/\./g, "-"));
        serviceProxy.setServiceProtocol(service.getServiceProtocol());
        serviceProxy.setServicePort(getIngressPort(service.getServiceName()));
        serviceProxy.setServiceBackendPort(service.getServicePort());
        serviceProxyList.add(serviceProxy);
    }
    container.setServiceProxies(serviceProxyList);
    containerList.add(container);

    return containerList;
};

function getRuntimeProperties(runtimeProperties){
    //setting runtime properties to the container
    var envs = new java.util.HashMap();
    if(runtimeProperties) {
        var runtimePropertyIterator = runtimeProperties.iterator();
        while (runtimePropertyIterator.hasNext()) {
            var runtimeProperty = runtimePropertyIterator.next();
            envs.put(runtimeProperty.getPropertyName(), runtimeProperty.getPropertyValue());
        }
    }
    return envs;
}

function getDeploymentConfig(containersList, applicationName, applicationRevision, replicas){

    var deploymentConfig = new Packages.org.wso2.appcloud.provisioning.runtime.beans.DeploymentConfig();
    deploymentConfig.setDeploymentName(applicationName + "-" + applicationRevision.replace(/\./g, '-'));
    deploymentConfig.setReplicas(parseInt(replicas));
    deploymentConfig.setContainers(containersList);

    return deploymentConfig;
}

/**
 * Method for getting all the available application types e.g : war, mss, car
 */
var getAllAppTypes = function(){

    var appTypeArray = [];

    try {
        var appTypes = ApplicationManager.getAllAppTypes();

        for (var i = 0; i < appTypes.length; i++) {
            var appType = appTypes[i];
            var appTypeObject = {};

            appTypeObject.id = appType.id;
            appTypeObject.name = appType.appTypeName;
            appTypeObject.description = appType.description;

            appTypeArray.push(appTypeObject);
        }
    } catch(e){
        log.error("Error while getting the list of apptypes");
        log.error(e);
        throw e;
    }

    return appTypeArray;
};

/**
 * Method for getting all the available runtimes e.g : tomcat, wso2as
 * @param appType application type
 */
var getAllRuntimes = function(appType){

    var runtimeArray = [];

    try {
        var runtimes = ApplicationManager.getAllRuntimesForAppType(appType);

        for(var i = 0; i < runtimes.length; i++){
            var runtime = runtimes[i];
            var runtimeObject = {};

            runtimeObject.id = runtime.id;
            runtimeObject.runtimeName = runtime.runtimeName;
            runtimeObject.imageName = runtime.imageName;
            runtimeObject.repoURL = runtime.repoURL;
            runtimeObject.tag = runtime.tag;

            runtimeArray.push(runtimeObject);
        }
    } catch(e){
        log.error("Error while getting the list of runtimes");
        log.error(e);
        throw e;
    }

    return runtimeArray;
}

/**
 * Method for getting the application summery of all the applications
 */
var getAllApplications = function(){
    var applicationArray = [];
    try {
        var applications = ApplicationManager.getApplicationList();
        var appTypesProperties = require(APP_TYPES_PROPERTIES_CONFIG);

        for (var i = 0; i < applications.length; i++) {
            var application = applications[i];
            var applicationObject = {};

            applicationObject.id = application.applicationId;
            applicationObject.applicationName = application.applicationName;
            applicationObject.runtimeName = application.runtimeName;
            applicationObject.status = application.status;
            applicationObject.applicationType = application.appType;
            applicationObject.icon = getApplicationIconAsBase64String(application);
            applicationObject.appTypeIcon = appTypesProperties[application.appType].icon;
            applicationObject.appTypeTitle = appTypesProperties[application.appType].displayName;
            applicationArray.push(applicationObject);
        }
    } catch(e){
        log.error("Error while getting the application list");
        log.error(e);
        throw e;
    }

    return applicationArray;
}

/**
 * Method for getting the application e.g. :- Application {
 *                                              id=1,
 *                                              applicationName="fooApp",
 *                                              revision="1.0.0",
 *                                              runtimeName= "WSO2AS",
 *                                              status = "Running",
 *                                              numberOfReplicas=2
 *                                              description="this is fooApp java application"
 *                                              }
 */
var getApplicationByNameRevision = function(appName,appRevision){
       try {
        var application = ApplicationManager.getApplicationByNameRevision(appName,appRevision);
            var applicationObject = {};
            applicationObject.id = application.applicationId;
            applicationObject.applicationName = application.applicationName;
            applicationObject.runtimeName = application.runtimeName;
            applicationObject.revision = application.revision;
            applicationObject.status = application.status;
            applicationObject.numberOfReplicas = application.numberOfReplicas;
            applicationObject.description = application.description;
            applicationObject.applicationType = application.applicationType;
            applicationObject.icon = getApplicationIconAsBase64String(application);
            applicationObject.runtimeProperties = generateRuntimePropsArray(application.runtimeProperties);
            applicationObject.labels = generateLabelsArray(application.labels);
            applicationObject.endpoints = generateEndpointsArray(application.endpoints);
    } catch(e){
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }

    return applicationObject;
}

/**
 * Get application icon as a base64 encoded string.
 *
 * @return base64 encoded string, null if icon is null
 */
function getApplicationIconAsBase64String(application) {
    var icon = null;
    if(application.icon){
        icon = Packages.org.apache.commons.codec.binary.Base64.
        encodeBase64String(application.icon.getBytes(1, application.icon.length()));
    }
    return icon;
}

/**
 * Update application icon
 *
 * @param applicationKey application key
 * @param appIcon file object of the appIcon
 */
function changeApplicationIcon(applicationName, revision, appIcon){
    if(appIcon){
        var streamHostObject = appIcon.getStream();
        var inputStream = streamHostObject.getStream();
        ApplicationManager.updateApplicationIcon(applicationName, inputStream);
    } else {
        log.error("Provided app icon is Empty for application : "+applicationName);
        throw "Provided app icon is Empty"
    }

}

var getEnvVariablesByNameRevision = function(appName,appRevision){
    var evnVariables = [];
       try {
        var envVars = ApplicationManager.getApplicationRuntimePropertiesByNameRevision(appName,appRevision);
           for (var i = 0; i < envVars.length; i++) {
               var envObj = {};
               envObj.key = envVars[i].propertyName;
               envObj.value = envVars[i].propertyValue;
               evnVariables.push(envObj);
           }
    } catch(e){
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
    return evnVariables;
};

var getTags = function(appName,appRevision){
    var tags = [];
       try {
        var tagArr = ApplicationManager.getTags(appName,appRevision);
           for (var i = 0; i < tagArr.length; i++) {
               var tagObj = {};
               tagObj.key = tagArr[i].labelName;
               tagObj.value = tagArr[i].labelValue;
               tags.push(tagObj);
           }
    } catch(e){
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
    return tags;
};

var updateTag = function (applicationName, applicationRevision, prevKey, newKey, prevValue, newValue) {
    try {
        ApplicationManager.updateTag(applicationName, applicationRevision, prevKey, newKey, prevValue, newValue);
    } catch (e) {
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
};
var updateApplicationRuntimeProperty = function (applicationName, applicationRevision, prevKey, newKey, prevValue, newValue) {
    try {
        ApplicationManager.updateApplicationRuntimeProperty(applicationName, applicationRevision, prevKey, newKey, prevValue, newValue);
    } catch (e) {
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
};

var deleteApplicationRuntimeProperty = function (applicationName, applicationRevision, key, value) {
    try {
        ApplicationManager.deleteApplicationRuntimeProperty(applicationName, applicationRevision, key, value);
    } catch (e) {
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
};
var deleteTag = function (applicationName, applicationRevision, key, value) {
    try {
        ApplicationManager.deleteTag(applicationName, applicationRevision, key, value);
    } catch (e) {
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
};
var addApplicationRuntimeProperty = function (applicationName, applicationRevision, key, value) {
    try {
        var runtimePropertyList = new java.util.ArrayList();
        var runtimeProperty = new Packages.org.wso2.appcloud.core.dto.RuntimeProperty();
        runtimeProperty.setPropertyName(key);
        runtimeProperty.setPropertyValue(value);
        runtimePropertyList.add(runtimeProperty);
        ApplicationManager.addRuntimeProperties(applicationName, applicationRevision, runtimePropertyList);
    } catch (e) {
        log.error("Error while adding runtime property with Key:" + key);
        log.error(e);
        throw e;
    }
};

var addTag = function (applicationName, applicationRevision, key, value) {
    try {
        var tagList = new java.util.ArrayList();
        var tag = new Packages.org.wso2.appcloud.core.dto.Label();
        tag.setLabelName(key);
        tag.setLabelValue(value);
        tagList.add(tag);
        ApplicationManager.addTags(applicationName, applicationRevision, tagList);
    } catch (e) {
        log.error("Error while adding runtime property with Key:" + key);
        log.error(e);
        throw e;
    }
};

var generateTagsList = function (tagListArray) {
    try {
        var size = tagListArray.length;
        var tagList = new java.util.ArrayList();
        for (var i = 0; i < size; i++) {
            var tagJsonObj = tagListArray[i];
            var tag = new Packages.org.wso2.appcloud.core.dto.Label();
            tag.setLabelName(tagJsonObj.key);
            tag.setLabelValue(tagJsonObj.value);
            tagList.add(tag);
        }
        return tagList;
    } catch (e) {
        log.error("Error while adding tags : ");
        log.error(tagListArray);
        log.error(e);
        throw e;
    }
};

var generateRuntimePropsList = function (runtimePropsArray) {
    try {
        var size = runtimePropsArray.length;
        var propsList = new java.util.ArrayList();
        for (var i = 0; i < size; i++) {
            var runtimePropJsonObj = runtimePropsArray[i];
            var runtimeProperty = new RuntimeProperty();
            runtimeProperty.setPropertyName(runtimePropJsonObj.key);
            runtimeProperty.setPropertyValue(runtimePropJsonObj.value);
            propsList.add(runtimeProperty);
        }
        return propsList;
    } catch (e) {
        log.error("Error while adding runtime props : ");
        log.error(propsList);
        log.error(e);
        throw e;
    }
};

var generateRuntimePropsArray=function(runtimeList){
    var size = runtimeList.size();
    var runtimePropsArray = [];
    for (var i = 0; i < size; i++) {
        var runtimePropObject = runtimeList.get(i);
        var runtimeProperty = {
            id: runtimePropObject.id,
            propertyName: runtimePropObject.propertyName,
            propertyValue: runtimePropObject.propertyValue,
            description: runtimePropObject.propertyValue
        };
        runtimePropsArray.push(runtimeProperty);
    }
    return runtimePropsArray;
}

var generateLabelsArray=function(labelsList){
    var size = labelsList.size();
    var labelsArray = [];
    for (var i = 0; i < size; i++) {
        var labelObject = labelsList.get(i);
        var label = {
            labelId: labelObject.labelId,
            labelName: labelObject.labelName,
            labelValue: labelObject.labelValue,
            description: labelObject.description
        };
        labelsArray.push(label);
    }
    return labelsArray;
}

var generateEndpointsArray=function(endpointsList){
    var size = endpointsList.size();
    var endpointsArray = [];
    for (var i = 0; i < size; i++) {
        var epObject = endpointsList.get(i);
        var endpoint = {
            id: epObject.id,
            urlValue: epObject.urlValue,
            description: epObject.description
        };
        endpointsArray.push(endpoint);
    }
    return endpointsArray;
}

var getAllRevisionsOfApplication =function(appName){
    var revisionArray = [];
    try {
        var revisions = ApplicationManager.getAllRevisionsOfApplication(appName);
        for (var i = 0; i < revisions.length; i++) {
            var revision = revisions[i];
            revisionArray.push(revisions[i]);
        }
    } catch(e){
        log.error("Error while getting the application list");
        log.error(e);
        throw e;
    }
    return revisionArray;
}

var getDeploymentURL = function (applicationName, applicationRevision, appTypeName){
    var urlScheme = CloudUtil.getPropertyValue("DeploymentUrlScheme");
    var baseURL = constructAppLaunchURL(applicationName, applicationRevision);
    var applicationLaunchURL = urlScheme + "://" + baseURL;

    log.debug("Deployment URL: " + applicationLaunchURL);
    return applicationLaunchURL;
}


var putSelectedRevisionToSession = function(applicationName, currentRevision) {
    var selectedVersions = session.get("SELECTED_REVISIONS");
    if (!selectedVersions) {
        selectedVersions = {};
    }
    selectedVersions[applicationName] = currentRevision;
    session.put("SELECTED_REVISIONS", selectedVersions);
}

var getSelectedRevisionFromSession = function(applicationName) {
    var selectedVersions = session.get("SELECTED_REVISIONS");
    if (selectedVersions && selectedVersions[applicationName]) {
        return selectedVersions[applicationName];
    } else {
        return null;
    }
}

var getApplicationCreationEvents = function(applicationName, applicationRevision) {

    var eventsManager = new EventsManager();
    var eventsArray = [];

    try {
            var events = eventsManager.getEventsOfApplication(applicationName, applicationRevision);
            for (var i = 0; i < events.length; i++) {
                var event = events[i];
                var eventObject = {};

                eventObject.name = event.eventName;
                eventObject.status = event.eventStatus;
                eventObject.timestamp = event.timestamp;
                eventObject.description = event.eventDescription;

                eventsArray.push(eventObject);
            }
        } catch(e){
            log.error("Error while getting the application creation event list");
            log.error(e);
            throw e;
        }
        return eventsArray;

    var events = eventsManager.getEventsOfApplication(applicationName, applicationRevision);

}

var uploadExistingArchive = function(uploadedArtifact, appTypeName, applicationName, revision){
    createDestinationDirsForUploadedApps(applicationName, revision);
    uploadedFileName = uploadedArtifact.getName();
    var fileUploadPath = "/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
            + modManager.getTenantDomain() + "/" + applicationName + "/" + revision + "/";

    var uploadApplicationTmpPath;
    var checkFileExtZIP = isFileExtZIP(uploadedFileName);

    if(checkFileExtZIP){
        var fileName = uploadedFileName.substring(0, uploadedFileName.lastIndexOf("."));
        uploadApplicationTmpPath = fileUploadPath + fileName + ".upload";
        log.info(uploadApplicationTmpPath);
    }else{
        uploadApplicationTmpPath = fileUploadPath + uploadedFileName;
        log.info(uploadApplicationTmpPath);
    }

    uploadedArtifact.move(uploadApplicationTmpPath);
}

var isFileExtZIP = function(uploadedFileName){
    var fileExt = uploadedFileName.substr(uploadedFileName.lastIndexOf(".") + 1, uploadedFileName.length);
    if(fileExt == "zip"){
        return true;
    }
    return false;
};

var createDestinationDirsForUploadedApps = function (applicationName, revision) {

    var destinationDir = new File("/" + TMP_UPLOADED_APPLICATIONS_PATH);
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();
    }
    var destinationDir = new File("/" + TMP_UPLOADED_APPLICATIONS_PATH + "/" + modManager.getTenantDomain());
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();

    }
    var destinationDir = new File("/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
            + modManager.getTenantDomain() + "/" + applicationName);
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();

    }
    var destinationDir = new File("/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
            + modManager.getTenantDomain() + "/" + applicationName + "/" + revision);
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();
    }
}

var downloadFromUrl = function(artifactUrl,applicationName, revision, apptype){
    log.info("Inside modules downloadFromUrl");
    createDestinationDirsForUploadedApps(applicationName, revision);
    var fileUploadPath = "/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
                + modManager.getTenantDomain() + "/" + applicationName + "/" + revision + "/";
    var CARBON_HOME = CarbonUtils.getCarbonHome();
    var filePath = CARBON_HOME + "/repository/deployment/server/jaggeryapps/appmgt";

    if (apptype == "war"){
        filePath  = filePath + fileUploadPath + applicationName + ".war";
    } else if (apptype == "mss") {
        filePath  = filePath + fileUploadPath + applicationName + ".jar";
    }
    log.info("apptype: " + apptype);
    CloudUtil.downloadFromUrl(artifactUrl , filePath);
}

var addEvent = function(name, status, description, applicationName, applicationRevision) {
    try {
        var eventsManager = new EventsManager();
        var event = new Event();

        event.setEventName(name);
        event.setEventStatus(status);
        event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
        event.setEventDescription(description);
        eventsManager.addAppCreationEvent(applicationName, applicationRevision, event);
    } catch (e) {
        log.error("Error while adding app creation event for application:"+applicationName + " with revision:"+
                applicationRevision+" event name:"+name+" ,event status:"+status+" ,event description:"+description);
        log.error(e);
        throw e;
    }
};

var deleteApplicationUploadedPath = function(applicationName, revision) {
    var fileUploadPath = modManager.getPropertyValue(PROPERTY_APPMGT_DEPLOYMENT_DIR_PATH) + "/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
            + modManager.getTenantDomain() + "/" + applicationName;
    var fileUtils = Packages.org.apache.commons.io.FileUtils;
    var fileUploadPath = new Packages.java.io.File(fileUploadPath);
    log.info("Deleting the uploaded file at:"+fileUploadPath.getAbsolutePath());
    if(fileUploadPath.exists()){
        //Commenting deleting upload path inorder to work retry app deployment correctly.
        // Upload path clean up force to upload the artifact again in the retying.
        //fileUtils.deleteDirectory(fileUploadPath);
    }
};

var deleteApplicationFromDatabase = function(applicationName, revision) {
    try{
        java.lang.Thread.sleep(3000); // database at last after the transaction completes.
        ApplicationManager.deleteApplication(applicationName, revision);
        log.info("Successfully deleted the application form the database");
    }catch(e){
        log.error("Error while deleting application from the database");
        log.error(e);
    }
}

var deleteApplicationFromKubernetes = function(applicationName, revision) {
    try{
        var KubernetesRuntimeProvisioningService = Packages.org.wso2.appcloud.provisioning.runtime.KubernetesRuntimeProvisioningService;

        var applicationCtx = KubernetesProvisioningUtils.getApplicationContext(
                applicationName, revision, null, modManager.getTenantId(), modManager.getTenantDomain());

        var kubernetesRuntimeProvisioningService = new KubernetesRuntimeProvisioningService(applicationCtx);

        kubernetesRuntimeProvisioningService.deleteDeployment();
        log.info("Successfully clean up the kubernetes deployments");

    }catch(e){
        log.error("Error while cleaning up the Kubernetes deployment");
        log.error(e);
    }
}
var cleaApplicationUploadedPath = function(applicationName, revision){
    var fileUploadPath = modManager.getPropertyValue(PROPERTY_APPMGT_DEPLOYMENT_DIR_PATH) + "/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
            + modManager.getTenantDomain() + "/" + applicationName;
    var fileUtils = Packages.org.apache.commons.io.FileUtils;
    var fileUploadPath = new Packages.java.io.File(fileUploadPath);
    log.info(fileUploadPath.getAbsolutePath())
    if(fileUploadPath.exists()){
        //Commenting deleting upload path inorder to work retry app deployment correctly.
        // Upload path clean up force to upload the artifact again in the retying.
        //fileUtils.deleteDirectory(fileUploadPath);
    }
}

var cleanUpApplicationDeployment = function(applicationName, revision){
    try {
        cleaApplicationUploadedPath(applicationName, revision);
        log.info("Successfully clean up the application uploaded directory");
    }catch(e){
        log.error("Error while cleaning up the application uploaded path");
        log.error(e);
    }

    try{
        ApplicationManager.deleteApplication(applicationName, revision);
        log.info("Successfully deleted the application form the database");
    }catch(e){
        log.error("Error while deleting application from the database");
        log.error(e);
    }

    try{
        var KubernetesRuntimeProvisioningService = Packages.org.wso2.appcloud.provisioning.runtime.KubernetesRuntimeProvisioningService;

        var applicationCtx = KubernetesProvisioningUtils.getApplicationContext(
                applicationName, revision, null, modManager.getTenantId(), modManager.getTenantDomain());

        var kubernetesRuntimeProvisioningService = new KubernetesRuntimeProvisioningService(applicationCtx);

        kubernetesRuntimeProvisioningService.deleteDeployment();
        log.error("Successfully clean up the kubernetes deployments");

    }catch(e){
        log.error("Error while cleaning up the Kubernetes deployment");
        log.error(e);
    }
}

var getIngressPort = function(serviceName){

    if(serviceName == "http" || serviceName == "http-alt"){
        return  80;
    }else if(serviceName == "https" || serviceName == "https-alt"){
        return 443;
    } else{
        return 80;
    }
}

%>
