<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log("module/application/application.jag");
var modManager = jagg.module("manager");
var ApplicationManager = Packages.org.wso2.appcloud.core.ApplicationManager;
var Application = Packages.org.wso2.appcloud.core.dto.Application;
var KubernetesProvisioningUtils =  Packages.org.wso2.appcloud.provisioning.runtime.Utils.KubernetesProvisioningUtils;
var EventsManager = Packages.org.wso2.appcloud.core.EventsManager;
var Event = Packages.org.wso2.appcloud.core.dto.Event;
var CloudUtil = Packages.org.wso2.appcloud.common.util.AppCloudUtil;
var RuntimeProperty = Packages.org.wso2.appcloud.core.dto.RuntimeProperty;
var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
/**
 * Add a application object
 *
 * @param applicationName name of the application
 * @param applicationRevision revision number of the application
 * @param applicationDescription description of the application
 * @param replicas no of replicas
 * @param uploadedArtifact the uploaded artifact file
 * @param runtimeId runtime id of the application
 */
var addApplication = function (applicationName, applicationRevision, applicationDescription, replicas, runtimeId, appTypeName, runtimeProperties, uploadedFileName) {
    log.info("Started creating App => name: " + applicationName + " " +
            "Revision: " + applicationRevision + " " + "Description: " + applicationDescription + " " +
            "Replicas: " + replicas + " runtimeId: " + runtimeId + " apptype: " + appTypeName + " "
    );

    //Create Docker file


    var eventsManager = new EventsManager();
    var event = new Event();

    //================================= Adding application to Database =========================================
    var application = new Application();
    application.setApplicationName(applicationName);
    application.setRevision(applicationRevision);
    application.setDescription(applicationDescription);
    application.setNumberOfReplicas(replicas);
    application.setRuntimeId(runtimeId);
    application.setApplicationType(appTypeName);


    if (runtimeProperties != null || runtimeProperties != "None") {
        var parsedRuntimeProperties = parse(runtimeProperties);
        if(Object.keys(parsedRuntimeProperties[0]).length > 0) {
            var runtimePropertyList = new java.util.ArrayList();
            for (var i = 0; i < parsedRuntimeProperties.length; i++) {
                var runtimeProperty = new RuntimeProperty();
                runtimeProperty.setPropertyName(parsedRuntimeProperties[i].key);
                runtimeProperty.setPropertyValue(parsedRuntimeProperties[i].value);
                runtimePropertyList.add(runtimeProperty);
            }
            application.setRuntimeProperties(runtimePropertyList);
        }
    }

    ApplicationManager.addApplication(application);

    //============================================================================================================


    //==================================== Create docker file block ==============================================

    //Adding docker file create pending event
    event.setEventName(DOCKER_FILE_CREATE);
    event.setEventStatus(EVENT_PENDING);
    event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
    event.setEventDescription("Docker file create successfully triggered in appcloud");
    eventsManager.addAppCreationEvent(applicationName, applicationRevision, event);

    //Create Docker file
    var DockerOpClient = Packages.org.wso2.appcloud.core.docker.DockerOpClient;
    var dockerOpClient = new DockerOpClient("http://127.0.0.1:2375");
    var fileUploadPath = "/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
            + modManager.getTenantDomain() + "/" + applicationName + "/" + applicationRevision + "/";
    var absFileUploadedPath = modManager.getPropertyValue('PROPERTY_APPMGT_DEPLOYMENT_DIR_PATH') + fileUploadPath;
    var dockerFilePath = absFileUploadedPath + DOCKER_FILE_NAME;
    dockerOpClient.createDockerFile(runtimeId, appTypeName, uploadedFileName, dockerFilePath);



    //Adding docker file create success event
    event.setEventName(DOCKER_FILE_CREATE);
    event.setEventStatus(EVENT_SUCCEEDED);
    event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
    event.setEventDescription("Docker file successfully created for application");
    eventsManager.addAppCreationEvent(applicationName, applicationRevision, event);

    //============================================================================================================



    //==================================== Build docker image block ==============================================

    //Adding docker build pending event
    event.setEventName(DOCKER_IMAGE_BUILD);
    event.setEventStatus(EVENT_PENDING);
    event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
    event.setEventDescription("Docker image build successfully triggered in appcloud");
    eventsManager.addAppCreationEvent(applicationName, applicationRevision, event);

    //Build Docker image
    var dockerRegTenantSpace = "super";
    var tenantDockerRegistryUrl = modManager.getPropertyValue('PROPERTY_DOCKER_REGISTRY_URL') + "/" + dockerRegTenantSpace;
    dockerOpClient.buildDockerImage(tenantDockerRegistryUrl,applicationName, applicationRevision,absFileUploadedPath);



    //Adding docker build pending event
    event.setEventName(DOCKER_IMAGE_BUILD);
    event.setEventStatus(EVENT_SUCCEEDED);
    event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
    event.setEventDescription("Docker image build successfully built");
    eventsManager.addAppCreationEvent(applicationName, applicationRevision, event);

    //============================================================================================================


    //==================================== Push docker image block ===============================================

     //Adding docker image push pending event
     event.setEventName(DOCKER_REGISTRY_PUSH);
     event.setEventStatus(EVENT_PENDING);
     event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
     event.setEventDescription("Docker image push successfully triggered in triggered");
     eventsManager.addAppCreationEvent(applicationName, applicationRevision, event);

     //Push Docker image
     dockerOpClient.pushDockerImage(tenantDockerRegistryUrl,applicationName, applicationRevision);

     //Adding docker push success event
     event.setEventName(DOCKER_REGISTRY_PUSH);
     event.setEventStatus(EVENT_SUCCEEDED);
     event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
     event.setEventDescription("Docker image successfully pushed to the remote registry");
     eventsManager.addAppCreationEvent(applicationName, applicationRevision, event);

    //============================================================================================================


    //==================================== Kubernetes deploy block ===============================================

    //Adding deployment pending event
    event.setEventName(KUBE_DEPLOY);
    event.setEventStatus(EVENT_PENDING);
    event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
    event.setEventDescription("Application deployment successfully triggered in Kubernetes");
    eventsManager.addAppCreationEvent(applicationName, applicationRevision, event);

    //Creating basic deployment
    var KubernetesRuntime = Packages.org.wso2.appcloud.provisioning.runtime.KubernetesRuntimeProvisioningService;

    var applicationCtx = KubernetesProvisioningUtils.getApplicationContext(
             applicationName, applicationRevision, appTypeName, modManager.getTenantId(), modManager.getTenantDomain());

    var kubService = new KubernetesRuntime(applicationCtx);

    var containers = getContainers(tenantDockerRegistryUrl,applicationName,applicationName, applicationRevision);
    var deploymentConfig = getDeploymentConfig(containers, applicationName, replicas);

    log.info("Deploying application: " + applicationName);
    kubService.deployApplication(deploymentConfig);

    //Adding deployment success event
    event.setEventName(KUBE_DEPLOY);
    event.setEventStatus(EVENT_SUCCEEDED);
    event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
    event.setEventDescription("Application deployment successfully triggered in Kubernetes");
    eventsManager.addAppCreationEvent(applicationName, applicationRevision, event);

    //============================================================================================================


    //Creating Ingress
    var ingressCreated = kubService.createDeploymentUrl("appcloud.wso2.com");
    log.info("Deployment URL status: " + ingressCreated);
};


/**
 * Method for getting all the available application types. e.g : war, mss, car
 */
function getContainers(tenantDockerRegistryUrl, applicationName, appServiceName, applicationRevision){
    var containerList = new java.util.ArrayList();
    var container1 = new Packages.org.wso2.appcloud.provisioning.runtime.beans.Container();
    var appBaseImageName = tenantDockerRegistryUrl + "/" + applicationName;
    container1.setContainerName(applicationName);
    container1.setBaseImageName(appBaseImageName);
    container1.setBaseImageVersion(applicationRevision);
    var envs1 = new java.util.HashMap();
    envs1.put("ORG","WSO2");
    container1.setEnvVariables(envs1);
    var serviceProxyList1 = new java.util.ArrayList();
    var serviceProxy1 = new Packages.org.wso2.appcloud.provisioning.runtime.beans.ServiceProxy();
    serviceProxy1.setServiceName(appServiceName);
    serviceProxy1.setServiceProtocol(KUB_SERVICE_PROTOCOL);
    serviceProxy1.setServicePort(KUB_SERVICE_PORT);
    serviceProxy1.setServiceBackendPort(KUB_SERVICE_BACKEND_PORT);
    serviceProxyList1.add(serviceProxy1);
    container1.setServiceProxies(serviceProxyList1);
    containerList.add(container1);

    return containerList;
};


function getDeploymentConfig(containersList, applicationName, replicas){

    var deploymentConfig = new Packages.org.wso2.appcloud.provisioning.runtime.beans.DeploymentConfig();
    deploymentConfig.setDeploymentName(applicationName);
    deploymentConfig.setReplicas(parseInt(replicas));
    deploymentConfig.setContainers(containersList);

    return deploymentConfig;
}


/**
 * Method for getting all the available application types e.g : war, mss, car
 */
var getAllAppTypes = function(){

    var appTypeArray = [];

    try {
        var appTypes = ApplicationManager.getAllAppTypes();

        for (var i = 0; i < appTypes.length; i++) {
            var appType = appTypes[i];
            var appTypeObject = {};

            appTypeObject.id = appType.id;
            appTypeObject.name = appType.appTypeName;
            appTypeObject.description = appType.description;

            appTypeArray.push(appTypeObject);
        }
    } catch(e){
        log.error("Error while getting the list of apptypes");
        log.error(e);
        throw e;
    }

    return appTypeArray;
};

/**
 * Method for getting all the available runtimes e.g : tomcat, wso2as
 * @param appType application type
 */
var getAllRuntimes = function(appType){

    var runtimeArray = [];

    try {
        var runtimes = ApplicationManager.getAllRuntimesForAppType(appType);

        for(var i = 0; i < runtimes.length; i++){
            var runtime = runtimes[i];
            var runtimeObject = {};

            runtimeObject.id = runtime.id;
            runtimeObject.runtimeName = runtime.runtimeName;
            runtimeObject.imageName = runtime.imageName;
            runtimeObject.repoURL = runtime.repoURL;
            runtimeObject.tag = runtime.tag;

            runtimeArray.push(runtimeObject);
        }
    } catch(e){
        log.error("Error while getting the list of runtimes");
        log.error(e);
        throw e;
    }

    return runtimeArray;
}

/**
 * Method for getting the application summery of all the applications
 */
var getAllApplications = function(){
    var applicationArray = [];
    try {
        var applications = ApplicationManager.getApplicationList();

        for (var i = 0; i < applications.length; i++) {
            var application = applications[i];
            var applicationObject = {};

            applicationObject.id = application.applicationId;
            applicationObject.applicationName = application.applicationName;
            applicationObject.runtimeName = application.runtimeName;
            applicationObject.status = application.status;

            applicationArray.push(applicationObject);
        }
    } catch(e){
        log.error("Error while getting the application list");
        log.error(e);
        throw e;
    }

    return applicationArray;
}

/**
 * Method for getting the application e.g. :- Application {
 *                                              id=1,
 *                                              applicationName="fooApp",
 *                                              revision="1.0.0",
 *                                              runtimeName= "WSO2AS",
 *                                              status = "Running",
 *                                              numberOfReplicas=2
 *                                              description="this is fooApp java application"
 *                                              }
 */
var getApplicationByNameRevision = function(appName,appRevision){
       try {
        var application = ApplicationManager.getApplicationByNameRevision(appName,appRevision);
            var applicationObject = {};
            applicationObject.id = application.applicationId;
            applicationObject.applicationName = application.applicationName;
            applicationObject.runtimeName = application.runtimeName;
            applicationObject.revision = application.revision;
            applicationObject.status = application.status;
            applicationObject.numberOfReplicas = application.numberOfReplicas;
            applicationObject.description = application.description;
            applicationObject.applicationType = application.applicationType;
            applicationObject.runtimeProperties = generateRuntimePropsArray(application.runtimeProperties);
            applicationObject.labels = generateLabelsArray(application.labels);
            applicationObject.endpoints = generateEndpointsArray(application.endpoints);
    } catch(e){
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }

    return applicationObject;
}

var getEnvVariablesByNameRevision = function(appName,appRevision){
    var evnVariables = [];
       try {
        var envVars = ApplicationManager.getApplicationRuntimePropertiesByNameRevision(appName,appRevision);
           for (var i = 0; i < envVars.length; i++) {
               var envObj = {};
               envObj.key = envVars[i].propertyName;
               envObj.value = envVars[i].propertyValue;
               evnVariables.push(envObj);
           }
    } catch(e){
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
    return evnVariables;
};

var getTags = function(appName,appRevision){
    var tags = [];
       try {
        var tagArr = ApplicationManager.getTags(appName,appRevision);
           for (var i = 0; i < tagArr.length; i++) {
               var tagObj = {};
               tagObj.key = tagArr[i].labelName;
               tagObj.value = tagArr[i].labelValue;
               tags.push(tagObj);
           }
    } catch(e){
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
    return tags;
};

var updateTag = function (applicationName, applicationRevision, prevKey, newKey, prevValue, newValue) {
    try {
        ApplicationManager.updateTag(applicationName, applicationRevision, prevKey, newKey, prevValue, newValue);
    } catch (e) {
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
};
var updateApplicationRuntimeProperty = function (applicationName, applicationRevision, prevKey, newKey, prevValue, newValue) {
    try {
        ApplicationManager.updateApplicationRuntimeProperty(applicationName, applicationRevision, prevKey, newKey, prevValue, newValue);
    } catch (e) {
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
};

var deleteApplicationRuntimeProperty = function (applicationName, applicationRevision, key, value) {
    try {
        ApplicationManager.deleteApplicationRuntimeProperty(applicationName, applicationRevision, key, value);
    } catch (e) {
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
};
var deleteTag = function (applicationName, applicationRevision, key, value) {
    try {
        ApplicationManager.deleteTag(applicationName, applicationRevision, key, value);
    } catch (e) {
        log.error("Error while getting the application");
        log.error(e);
        throw e;
    }
};
var addApplicationRuntimeProperty = function (applicationName, applicationRevision, key, value) {
    try {
        var runtimePropertyList = new java.util.ArrayList();
        var runtimeProperty = new Packages.org.wso2.appcloud.core.dto.RuntimeProperty();
        runtimeProperty.setPropertyName(key);
        runtimeProperty.setPropertyValue(value);
        runtimePropertyList.add(runtimeProperty);
        ApplicationManager.addRuntimeProperties(applicationName, applicationRevision, runtimePropertyList);
    } catch (e) {
        log.error("Error while adding runtime property with Key:" + key);
        log.error(e);
        throw e;
    }
};

var addTag = function (applicationName, applicationRevision, key, value) {
    try {
        var tagList = new java.util.ArrayList();
        var tag = new Packages.org.wso2.appcloud.core.dto.Label();
        tag.setLabelName(key);
        tag.setLabelValue(value);
        tagList.add(tag);
        ApplicationManager.addTags(applicationName, applicationRevision, tagList);
    } catch (e) {
        log.error("Error while adding runtime property with Key:" + key);
        log.error(e);
        throw e;
    }
};

var generateRuntimePropsArray=function(runtimeList){
    var size = runtimeList.size();
    var runtimePropsArray = [];
    for (var i = 0; i < size; i++) {
        var runtimePropObject = runtimeList.get(i);
        var runtimeProperty = {
            id: runtimePropObject.id,
            propertyName: runtimePropObject.propertyName,
            propertyValue: runtimePropObject.propertyValue,
            description: runtimePropObject.propertyValue
        };
        runtimePropsArray.push(runtimeProperty);
    }
    return runtimePropsArray;
}

var generateLabelsArray=function(labelsList){
    var size = labelsList.size();
    var labelsArray = [];
    for (var i = 0; i < size; i++) {
        var labelObject = labelsList.get(i);
        var label = {
            labelId: labelObject.labelId,
            labelName: labelObject.labelName,
            labelValue: labelObject.labelValue,
            description: labelObject.description
        };
        labelsArray.push(label);
    }
    return labelsArray;
}

var generateEndpointsArray=function(endpointsList){
    var size = endpointsList.size();
    var endpointsArray = [];
    for (var i = 0; i < size; i++) {
        var epObject = endpointsList.get(i);
        var endpoint = {
            id: epObject.id,
            urlValue: epObject.urlValue,
            description: epObject.description
        };
        endpointsArray.push(endpoint);
    }
    return endpointsArray;
}

var getAllRevisionsOfApplication =function(appName){
    var revisionArray = [];
    try {
        var revisions = ApplicationManager.getAllRevisionsOfApplication(appName);
        for (var i = 0; i < revisions.length; i++) {
            var revision = revisions[i];
            revisionArray.push(revisions[i]);
        }
    } catch(e){
        log.error("Error while getting the application list");
        log.error(e);
        throw e;
    }
    return revisionArray;
}

var getDeploymentURL = function (applicationName, applicationRevision, appTypeName){

    var applicationCtx = KubernetesProvisioningUtils.getApplicationContext(
             applicationName, applicationRevision, appTypeName, modManager.getTenantId(), modManager.getTenantDomain());

    var deploymentPath = KubernetesProvisioningUtils.getDeploymentPath(applicationCtx);
    var baseURL = CloudUtil.getPropertyValue("ApplicationLaunchBaseURL");

    log.debug("Deployment URL: " + baseURL + deploymentPath);
    return baseURL + deploymentPath;
}


var putSelectedRevisionToSession = function(applicationName, currentRevision) {
    var selectedVersions = session.get("SELECTED_REVISIONS");
    if (!selectedVersions) {
        selectedVersions = {};
    }
    selectedVersions[applicationName] = currentRevision;
    session.put("SELECTED_REVISIONS", selectedVersions);
}

var getSelectedRevisionFromSession = function(applicationName) {
    var selectedVersions = session.get("SELECTED_REVISIONS");
    if (selectedVersions && selectedVersions[applicationName]) {
        return selectedVersions[applicationName];
    } else {
        return null;
    }
}

var getApplicationCreationEvents = function(applicationName, applicationRevision) {

    var eventsManager = new EventsManager();
    var eventsArray = [];

    try {
            var events = eventsManager.getEventsOfApplication(applicationName, applicationRevision);
            for (var i = 0; i < events.length; i++) {
                var event = events[i];
                var eventObject = {};

                eventObject.name = event.eventName;
                eventObject.status = event.eventStatus;
                eventObject.timestamp = event.timestamp;
                eventObject.description = event.eventDescription;

                eventsArray.push(eventObject);
            }
        } catch(e){
            log.error("Error while getting the application creation event list");
            log.error(e);
            throw e;
        }
        return eventsArray;

    var events = eventsManager.getEventsOfApplication(applicationName, applicationRevision);

}

var uploadExistingArchive = function(uploadedArtifact, appTypeName, applicationName, revision){
    createDestinationDirsForUploadedApps(applicationName, revision);
    uploadedFileName = uploadedArtifact.getName();
    var fileUploadPath = "/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
            + modManager.getTenantDomain() + "/" + applicationName + "/" + revision + "/";
    uploadApplicationTmpPath = fileUploadPath + uploadedFileName;
    uploadedArtifact.move(uploadApplicationTmpPath);
}

var createDestinationDirsForUploadedApps = function (applicationName, revision) {

    var destinationDir = new File("/" + TMP_UPLOADED_APPLICATIONS_PATH);
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();
    }
    var destinationDir = new File("/" + TMP_UPLOADED_APPLICATIONS_PATH + "/" + modManager.getTenantDomain());
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();

    }
    var destinationDir = new File("/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
            + modManager.getTenantDomain() + "/" + applicationName);
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();

    }
    var destinationDir = new File("/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
            + modManager.getTenantDomain() + "/" + applicationName + "/" + revision);
    if (!destinationDir.isExists()) {
        destinationDir.mkdir();
    }
}

var downloadFromUrl = function(artifactUrl,applicationName, revision, apptype){
    log.info("Inside modules downloadFromUrl");
    createDestinationDirsForUploadedApps(applicationName, revision);
    var fileUploadPath = "/" + TMP_UPLOADED_APPLICATIONS_PATH + "/"
                + modManager.getTenantDomain() + "/" + applicationName + "/" + revision + "/";
    var CARBON_HOME = CarbonUtils.getCarbonHome();
    var filePath = CARBON_HOME + "/repository/deployment/server/jaggeryapps/appmgt";

    if (apptype == "war"){
        filePath  = filePath + fileUploadPath + applicationName + ".war";
    } else if (apptype == "mss") {
        filePath  = filePath + fileUploadPath + applicationName + ".jar";
    }
    log.info("apptype: " + apptype);
    CloudUtil.downloadFromUrl(artifactUrl , filePath);
}

%>
