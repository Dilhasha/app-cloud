<%
/*
 * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");

var log = new Log("module/mgtapp/mgtapp.jag");
var carbon = require('carbon');
var server = carbon.server;
var multitenancy = carbon.multitenancy;
var modManager = jagg.module("manager");
var mgtAppUrl = modManager.getPropertyValue(MGT_APP_URL);
var mgtAppUsername = modManager.getPropertyValue(MGT_APP_ADMIN_USERNAME);
var mgtAppPassword = modManager.getPropertyValue(MGT_APP_ADMIN_PASSWORD);
var EventsManager = Packages.org.wso2.appcloud.core.EventsManager;
var Event = Packages.org.wso2.appcloud.core.dto.Event;
var headers = {
    "Authorization": "Basic " + Base64.encode(mgtAppUsername + ":" + mgtAppPassword),
    "Content-Type": "application/json"
};
var type = "json";


// download the built artifact via mgtapp
var downloadArtifact = function(appType, sourceDir, fileType) {
    var tanantDomain = modManager.getTenantDomain();
    var url = mgtAppUrl + "/downloadArtifact/" + tanantDomain +"/" + appType + "/" + sourceDir + "/" + fileType;
    var result = get(url, null, headers, type);
};

// create the source location via mgtapp
var createSourceLocation = function (versionKey, appType, sourceDir, sample) {
    var msg = "Creating Ballerina source location";
    addEvent(BALLERINA_SOURCE_LOCATION_CREATION, EVENT_PENDING, msg, versionKey);

    var tenantDomain = modManager.getTenantDomain();
    var url = mgtAppUrl + "/createSource/" + tenantDomain + "/" + appType + "/" + sourceDir + "/" + sample;
    var retryCount = 5;
    for (var i = 0; i < retryCount; i++) {
        try {
            var result = get(url, null, headers, type);
            if (result) {
                var msg = "Creating Ballerina source location succeeded";
                addEvent(BALLERINA_SOURCE_LOCATION_CREATION, EVENT_SUCCEEDED, msg, versionKey);
                log.info("Create source location succeeded. : " + tenantDomain + "/" + appType + "/" + sourceDir);
                break;
            }
        } catch (e) {
            log.warn("Create source location failed. Retrying : " + tenantDomain + "/" + appType + "/" + sourceDir);
            setTimeout(function(){}, 2000);
        }
        i++;
        if (i == retryCount) {
            var msg = "Ballerina source build failed";
            addEvent(BALLERINA_SOURCE_BUILD, EVENT_FAILED, msg, versionKey);
            // todo: send a mail
        }
    }
};

// build the source via mgtapp
var buildSource = function (appType, sourceDir, versionKey) {

    var msg = "Starting Ballerina source build";
    addEvent(BALLERINA_SOURCE_BUILD, EVENT_PENDING, msg, versionKey);

    var tanantDomain = modManager.getTenantDomain();
    var url = mgtAppUrl + "/buildService/" + tanantDomain + "/" + appType + "/" + sourceDir;
    var result = get(url, null, headers, type);

    if (result.data) {
        var msg = "Completed Ballerina source completed";
        addEvent(BALLERINA_SOURCE_BUILD, EVENT_SUCCEEDED, msg, versionKey);
    } else {
        var msg = "Ballerina source build failed";
        addEvent(BALLERINA_SOURCE_BUILD, EVENT_FAILED, msg, versionKey);
    }
    return result.data;
};


var addEvent = function(name, status, description, versionHashId) {
    try {
        var eventsManager = new EventsManager();
        var event = new Event();

        event.setEventName(name);
        event.setEventStatus(status);
        event.setTimestamp(new Packages.java.sql.Timestamp(new Date().getTime()));
        event.setEventDescription(description);
        eventsManager.addAppCreationEvent(versionHashId, event);
    } catch (e) {
        log.error("Error while adding event for application with version hash id : "+versionHashId + " with version hash Id :"
            + versionHashId+" event name:"+name+" ,event status:"+status+" ,event description:"+description);
        log.error(e);
        // not throwing error, because it will affect the application creation process
    }
};

var listSourceDirs = function (sourceLocation) {
    var tanantDomain = modManager.getTenantDomain();
    var sourcePath = tanantDomain + "/" + BALLERINA + "/" + sourceLocation;
    var url = mgtAppUrl + "/listSourceDirs";
    var retryCount = 5;
    var result = null;
    for (var i = 0; i < retryCount; i++) {
        try {
            var data = {path: sourcePath};
            result = post(url, stringify(data), headers, "json");
            if (result) {
                break;
            }
        } catch (e) {
            log.error(e);
            setTimeout(function(){}, 2000);
        }
        i++;
        log.info("calling listSourceDirs : " + i);
    }

    var jsonResponse = [];


    var myArrayList = [];
    if (result.data) {
        myArrayList = result.data.myArrayList;
        for (var j = 0; j < myArrayList.length; j++) {
            var message = {
                "key": myArrayList[j],
                "value": myArrayList[j]
            };

            jsonResponse.push(message);
        }
    }

    return jsonResponse;
};

var getLastModifiedFile = function (sourceLocation) {
    var tanantDomain = modManager.getTenantDomain();
    var sourcePath = tanantDomain + "/" + BALLERINA + "/" + sourceLocation;
    var url = mgtAppUrl + "/getLastModifiedFile";
    var retryCount = 5;
    var result = null;
    for (var i = 0; i < retryCount; i++) {
        try {
            var data = {path: sourcePath};
            result = post(url, stringify(data), headers, "json");
            if (result != null) {
                break;
            }
        } catch (e) {
            log.error(e);
            setTimeout(function () {
            }, 2000);
        }
        i++;
        log.info("calling listSourceDirs : " + i);
    }

    if (result == '') {
        return null;
    }

    return result;
};
%>